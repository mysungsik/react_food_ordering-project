1. 클래스네임 선택방법

    1) className = {styles.xx}
    2) className = {styles.xx_yy_zz}
    3) className = {styles["xx_yy_zz"]}

2. Header에 이미지를 집어넣어, 화면 꾸미기 가능
    헤더 아래쪽에 이미지를 틀어서 달아놓으니 예쁘다.

3. [CSS - background] main-background 를 만들어서, "움찔거리지 않는 백그라운드" 만들기

    뭐먹지 페이지 만들다, 메인 백그라운드 이미지에 너무 데였다.

    background 는, 파일을 따로 만들어서, 

    absolute 로 만들어서, 전체 를 덮고, z-index 를 마이너스로 설정해서, 우선순위를 뒤로 미룬다.

    <수정>

-       position fixed 로 만든다!! 

        그럼 늘어난 화면에 그대로 다 적용된다. [화면 크기가 100% 가 넘어도, 자동으로 맞춰진다.]

        .main_background {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 110%;
            background: linear-gradient(
              to left,
              rgba(120, 120, 120, 0.873),
              rgba(23, 23, 23, 0.778)
            );
            z-index: -1;
        }
          

3. 컴포넌트 함수의 반환하는 곳에, map 등을 써서, 집어넣지 말고, 외부에 빼서 사용할것

    < 기존 >
        function msFun(){
            return(
                <div>
                    {Array.map(item => <li> {item.titld } ... <li>)}    
                </div>
            )
        }

-   <변경>

        function msFun(){

            const foodsArray = Array.map(item => <li> {item.titld } ... <li>)

            return(
                <div>
                    {foodsArray}    
                </div>
            )
        }


4. [CSS] z-index 가 먹지 않으면, position : relative 를 사용하여, 위로 올릴 수 있다. 

5. [CSS - layout]  header는, absoulte 등으로 두고, margin을 위한 빈 div를 만들어(얘는 position 적용받지 않게 밖으로) margin을 통해 body 를내린다.

        <ul className={styles.header}>          ==> 얘는 absolute
            <li> </li>
            ...

        <div className={styles.header_marginbox}> </div>        ==> 얘는 position X => 얘한테 마진 적용하면 body 가 내려감

6. [CSS - layout]  footer 는, position 을 "따로 설정하지 않아서", 편하게 바닥에 있게 하도록 만들자

7. [ Modal ] React Portal 을 이용하여, Modal 을 만들어본다.


