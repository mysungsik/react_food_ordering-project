1. 클래스네임 선택방법

    1) className = {styles.xx}
    2) className = {styles.xx_yy_zz}
    3) className = {styles["xx_yy_zz"]}

2. Header에 이미지를 집어넣어, 화면 꾸미기 가능
    헤더 아래쪽에 이미지를 틀어서 달아놓으니 예쁘다.

3. [CSS - background] main-background 를 만들어서, "움찔거리지 않는 백그라운드" 만들기

    뭐먹지 페이지 만들다, 메인 백그라운드 이미지에 너무 데였다.

    background 는, 파일을 따로 만들어서, 

    absolute 로 만들어서, 전체 를 덮고, z-index 를 마이너스로 설정해서, 우선순위를 뒤로 미룬다.

    <수정>

-       position fixed 로 만든다!! 

        그럼 늘어난 화면에 그대로 다 적용된다. [화면 크기가 100% 가 넘어도, 자동으로 맞춰진다.]

        .main_background {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 110%;
            background: linear-gradient(
              to left,
              rgba(120, 120, 120, 0.873),
              rgba(23, 23, 23, 0.778)
            );
            z-index: -1;
        }
          

3. 컴포넌트 함수의 반환하는 곳에, map 등을 써서, 집어넣지 말고, 외부에 빼서 사용할것

    < 기존 >
        function msFun(){
            return(
                <div>
                    {Array.map(item => <li> {item.titld } ... <li>)}    
                </div>
            )
        }

-   <변경>

        function msFun(){

            const foodsArray = Array.map(item => <li> {item.titld } ... <li>)

            return(
                <div>
                    {foodsArray}    
                </div>
            )
        }


4. [CSS] z-index 가 먹지 않으면, position : relative 를 사용하여, 위로 올릴 수 있다. 

5. [CSS - layout]  header는, absoulte 등으로 두고, margin을 위한 빈 div를 만들어(얘는 position 적용받지 않게 밖으로) margin을 통해 body 를내린다.

        <ul className={styles.header}>          ==> 얘는 absolute
            <li> </li>
            ...

        <div className={styles.header_marginbox}> </div>        ==> 얘는 position X => 얘한테 마진 적용하면 body 가 내려감

6. [CSS - layout]  footer 는, position 을 "따로 설정하지 않아서", 편하게 바닥에 있게 하도록 만들자

7. [ Modal ] React Portal 을 이용하여, Modal 을 만들어본다.

8. [ javascript ] reduce() 알아보기

    Array.reduce(( 축적된값, 선택 )=>{ 로직 }, 초기값)
 
    1) [0 ,1,2,3 ] 더하기

        const sum = Array.reduce((acc, item) => acc + item , 0)

    2) [{x:0}, {x:1}, {x:2}] 더하기

        const sum = Array.reduce((acc, item) => acc + item.x, 0)

9. [ javascript ] concat() 으로, "새 항목 추가하여", "새 배열"을 반환하기

    concat 은 push 와 달리,
    배열 안에 새 값을 넣어주면서도, "새 배열" 을 반환한다.

10. [ javascript ] func.bind() ** 으로 "무한증식 버튼에 각각 다른 기능의 함수 바인드하기"

-   1. 전체적용 [ 강제로, 함수에서, this(context) 를 고정시켜주는 bind()]

        func.bind(context)는 함수처럼 호출 가능한 '특수 객체(exotic object)'를 반환합니다. 
            이 객체를 호출하면 "this가 context로 고정된 함수 func가 반환"됩니다.

        따라서 boundFunc를 호출하면 "this가 고정된 func를 호출하는 것과 동일한 효과"를 봅니다.

        아래 funcUser에는 "this가 user로 고정된 func"이 할당됩니다.

            let user = {
                firstName: "John"
            };

            function func() {
                alert(this.firstName);
            }

            let funcUser = func.bind(user);
            funcUser(); // John

        ** "변수 funcUser 로 묶지 않고", func.bind(user) 으로 "직접사용" 해도 상관없다.
 


-   2. 부분적용 [ this(context)는 아무거나(null), 첫번째로 수신한 아규먼트(인수)는 X 로 설정하는, 부분적용 "func.bind(null, X)"]

        ==> 부분적용이란, 
            func.bind(context , arg1, arg2...) 라 할때,
            "전체적용"처럼   bind의 첫번째 값(context)은, 적용할 함수의 "this" 를 고정시켜주는 역할을 하고
                            bind의 두번째 이후 값(arg1, arg2 ...) 은, "적용할 함수의 파라미터에 들어갈 아규먼트"를 "고정"시켜 주는 역할을 한다.

            function mul(a, b) {
                return a * b;
            }

            let double = mul.bind(null, 2);

            alert( double(3) ); // = mul(2, 3) = 6
            alert( double(4) ); // = mul(2, 4) = 8
            alert( double(5) ); // = mul(2, 5) = 10

        ==> 위의 함수 mul에는 파라미터가 두개 있다.
            위의 함수 mul은,    "객체안의 함수"(메서드) 가 아니므로, this 라 해도 받을 것이 없다.
            그러므로, "this 고정은 제외하고, 첫번째 파라미터 안에 들어갈 인수(아규먼트)" 만을 "고정" 시켜주기 위해,

            [   func.bind(null, 3)  ]

            을 사용한다면," this는 상관 없으니 null", "첫번째 아규먼트를 3으로 고정시킨 함수가 재탄생"하는것이다.

                ** "변수 double 로 묶지 않고", mul.bind(null,2) "직접 사용"해도된다.

                ** bind 를 사용할때는 "context는 항상 넘겨주어야 하니", 
                    "아규먼트를 고정시키면서, 메서드(객체 안의 함수)가 아니라면" 
                    항상 "bind의 첫번째 값은 null" 로 적용시키고, "두번째 값을 사용하도록"하자

-   3. 부분적용의 활용
        
        : "하나의 고정된 페이지"에, "무한히 증식가능한 Button을 넣을때," 각 버튼마다 다른 역할을 하게 만들 수 있다.

            "A" 라는 페이지는, "a, b, c, d..." 등의 "데이터로 만든, 무한증식 배열이 있는 페이지이다."

            데이터 "a" 일때는 "A-a"
            데이터 "b" 일때는 "A-b" ...
            
                로 이동하는 버튼(함수)을 만들고 싶을때,

            function XXPage(props) {
                const { ArrayA } = props

                function move(id){
                    window.location.href = `/${id}`
                }

                    return(
                        ArrayA.map((item) => (
                            <button onClick={move.bind(null, item.id )}> 이동 </button>
                        ))
                    )

        => 배열객체에 의해, 버튼은 무한히 증식되어도, 각 버튼은 bind 에 의해 고정된 인수를 가지므로, 
            각 버튼은 다른 역할을 하게 만들 수 있다.

        



