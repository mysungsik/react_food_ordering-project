0. 전체 웹의 인덱스

    1. 전체 음식 주문창
    2. "담기" 버튼을 눌러, "Cart에 담는다." [ CART DB 에 담아 카트 컴포넌트에서 그 DB를 받아 사용 ]
    3. "Cart"안에는, 담긴 총 음식의 수량이 표시된다.
    4. "Cart"안에는, 담긴 음식의 종류 및 각각의 수량도 표시된다.
    5. "Cart" 안에서, "주문" 이나 "닫기" 버튼을 눌러, 주문이나 닫기를 한다.

1. 레이아웃 및 UI 작업

2. 백그라운드 작업

3. 주문 가능한 음식 리스트 작성()

4. Cart 를 만들어서, Modal 화 시킨후, Poratl 을 이용하여, 주문을 누르면, Modal 창 딱!
    Cart 창에 있는 음식들은, 내가 음식 리스트에서 선택한 것.

5. 카트와 모달, 포탈에 대해

    1. "카트" 를 만든다.
    2. "카트 버튼"을 누르면, "카트" 가 "모달" 형태로 만들어져 렌더되게 만든다.
    3. 그러므로 "카트 모달"은 "포털"을 이용하여, "index.html 에 연결한다."
    4. "카트 모달이 실제로 렌더되는 곳은 index.html"이다.
    5. "카트가 직접 실행되는 곳은, Header의 카트 버튼"이다.
    6. "카트 버튼"에서 "카트 모달"을 렌더하면, "카트 모달"은 "최상위 포지션의 형제 컴포넌트로 렌더된다."
    7. "실행되는 곳"에서는 State 를 통해, 끄고, 켜고를 만든다.
    8. 또한, "끄고 켜는 함수" 를 "카트 모달"로 props 드릴리으로 넘겨 "모달에서도 끄고 닫기를 사용하게 만든다."

6. 어느곳에서 눌러도, "카트안에 담긴 아이템"이 업데이트 되게, "Context" 로, 카트 업데이트하기

    1. "담기" 를 누르면, "카트 안으로, id, 이름, 수량, 가격" 정보가 들어가야한다.
    2. "카트" 안에서는 "각 수량에 따라 Total Price"를 계산하여 값을 내린다.
    3. "카트" 안에서, "각 수량을 조정 가능" 하게 만든다.

    
    => "카트"안의 "수량 값"을, "카트와 FoodItem" 두곳 모두에서 같은 데이터를 다루어야한다.
    => "Context"를 사용한다.


    <코드>
        [1. 기본적인 createContext 의 틀 만들기] - "/store/Cart-Context.js"

            import { createContext, useState } from "react";

            const CartContext = createContext({
                itemInfo: [],                       // itemInfo 에는 객체형태의 id, name, amount 이 들어갈것이다. 
                totalAmount:0,
                addItem: ()=>{},
                removeItem: ()=>{}
            });
            
            export function CartContextProvider(props) {
            
                function addItem(){
                }
                function removeItem(){
                }
                const context={
                }
            
                return (
                    <CartContext.Provider value={context}>
                        {props.children}
                    </CartContext.Provider>
                );
            }
            export default CartContext;

        [2. Provider 로, 전체 앱 감싸주기] - index.js

            import { CartContextProvider } from "./store/Cart-Context";

            const root = ReactDOM.createRoot(document.getElementById("root"));
            root.render(
                <CartContextProvider>
                    <Layout>
                        <MainBackround />
                        <App />
                    </Layout>
                </CartContextProvider>
            );

        [3. 필요한데 사용하기, 첫번째로, "header" 안의  "Cart 버튼" 옆의 숫자] with "Array.reduce()"
            
            import CartContext from "../../../store/Cart-Context";

            function LayoutHeader() {
                const [showModal, setShowModal] = useState(false);
                const cartCtx = useContext(CartContext);

                const totalItemAmount = cartCtx.itemInfo.reduce((acc, item) => acc + item.amount,0);
                ...
            }


        ==> 만약 "context" 안의 "state" 에 값이 변할 경우, 
            reduce 함수에 의해, "state.itemInfo.amount 들의 값들을 더해", "카트 옆 숫자에 표기"


        [4. contextProvider 에서 "추가, 제거" 구현 로직 만들기] with "useReducer"

            => add 하고 remove 하는 것은
                itemInfo 를 찾아, 이미 있는지 없는지를 확인, 
                있다면, amount 만 추가, 제거 하고
                없다면, 전체를 추가

                또한, 기존의 amount 보다 적다면, 전체를 삭제

                해야하는 복잡한 로직을 가지고있다.

                그러므로 "useState" 보다는 "useReducer" 훅을 사용하여,

                "로직을 유사한 것들끼리 모으고", "컴포넌트 함수 밖에서 깔끔하게 정리한다."

            1) 기본 useReducer 틀 만들기

                    import { createContext, useReducer, useState } from "react";

                    const CartContext = createContext({
                        itemInfo: [],
                        totalAmount: 0,
                        addItem: () => {},
                        removeItem: () => {},
                    });

                    function cartReducerFn(state, action) {
                        
                    }

                    export function CartContextProvider(props) {
                        const [cartState, dispatchCartAction] = useReducer(cartReducerFn, {     // cartState 로 카트의 "상태"를 저장
                            itemInfo: [],                                       // 카트 "상태" 의 초기값 지정 (무얼 넣을거라는 안내도 되도록, 직접넣음)
                            totalAmount: 0,                                     // "itemInfo" 에는, "id, name, amount, price" 가 들어갈것이다.     
                        });

                        function addItem() {}

                        function removeItem() {}

                        const context = {
                            itemInfo: cartState.itemInfo,               //  "카트의 상태"의 itemInfo
                            totalAmount: cartState.totalAmount,         //  "카트의 상태"의 totalAmount
                            addItem: addItem,
                            removeItem: removeItem,
                        };

                        return (
                            <CartContext.Provider value={context}>
                                {props.children}
                            </CartContext.Provider>
                        );
                    }
                    export default CartContext;

            2) "페이로드" 를 이용하여, 새 값 추가하는 로직 만들기 [일단 추가 로직만] with. Array.concat()

                    function cartReducerFn(state, action) {

                            // "state 는 현재상태", "action" 은 "dispatch 안에 들어있는 객체"들에 접근한다.
                            // "페이로드" 로, "action 안에 type 뿐 아니라, item 객체를 넣어" "새로 넣을 값"을 추가한다.

                        if (action.type == "ADD_ITEM") {
                            const updatedItem = state.itemInfo.concat(action.item);         // 새 값은 item 객체이다.
                            const updatedPrice = state.totalPrice + action.item.price * action.item.amount; 
                            return {
                                itemInfo: updatedItem,
                                totalPrice: updatedPrice,
                            };
                        }
                        if (action.type == "REMOVE_ITEM") {
                            ...
                        }
                    }
                    
                    export function CartContextProvider(props) {
                        const [cartState, dispatchCartAction] = useReducer(cartReducerFn, {         // 넣을 데이터의 초기값(안내)
                            itemInfo: [],
                            totalPrice: 0,
                        });
                    
                        function addItem(item) {
                            dispatchCartAction({ type: "ADD_ITEM", item: item });   // 페이로드로, 새 값을 넣어준다.
                        }
                    
                        function removeItem(id) {
                            dispatchCartAction({ type: "REMOVE_ITEM", id: id });    // 페이로드로, 변경할 데이터에 접근한다.
                        }

                            ...
                    }

        [5. "foodItem" 에 가서, "Context 안의 addItem 함수"를 사용하여, 새 값 넣어보기 , with "useRef", "useContext" ]

                    import { useContext, useRef } from "react";
                    import CartContext from "../../store/Cart-Context";

                    function FoodItem(props) {
                        const { id, name, description, price } = props;
                        const amountRef = useRef();
                        const cartCtx = useContext(CartContext);

                        function submitHandler(e) {
                            e.preventDefault();

                            const amountData = amountRef.current.value;

                            if (amountData > 0) {
                                cartCtx.addItem({
                                    id: id,
                                    name: name,
                                    amount: amountData,
                                    price: price,
                                });
                            } else {
                                return;
                            }
                        }

                        return (
                            <div className={styles.maindiv}>
                                ...
                                <div className={styles.foods_resist}>
                                    <div className={styles.content}>
                                        <label htmlFor={"number"}> 수량 </label>
                                        <input
                                            id={"number"}
                                            type={"number"}
                                            defaultValue={1}
                                            ref={amountRef}
                                        />
                                    </div>
                                    <button onClick={(e) => submitHandler(e)}> 담기</button>

        ==> "버튼클릭" -> "context 컴포넌트 안의 addItem 함수 트리거" -> "dispatch 의 전달, 그에 맞는 action 실행"
                -> "action"은 "cartState 를 업데이트" -> "cartState 안의 값들에 의해, context 의 itemInfo, totlaPrice 가 업데이트"
                        -> "Header"의 "카트 숫자"는 그 안의 reduce 로직에 의해 "itemInfo 안의 총 amount 를 계산해 업데이트됌"



        ** Context가 잘 실행되는 것은 확인했다. "Cart를 Context 에서 오는 정보로(더미데이터 말고), 제대로 업데이트하도록" 수정하자

7. 카트 컴포넌트, Context 에서 오는 데이터로 제대로 업데이트

        function Cart(props) {
            const { toggleModal } = props;
            const cartCtx = useContext(CartContext);
            const cartItemInfo = cartCtx.itemInfo;
        
            const cartItems = cartItemInfo.map((item) => (
                <div>
                    <li>
                    <div className={styles.item_info}>
                        <h2> {item.name}</h2>
                        <p> {item.price}</p>
                    </div>
                    <div className={styles.item_quantity}>
                        <div>
                        <label htmlFor={"number"}> 수량 </label>
                        <input id={"number"} type={"number"} defaultValue={item.amount} />

                    ...

        ))}

8. 카트 컴포넌트에서, "+, -" 누르면, Context의 itemInfo 안에 있는 값이 변경되어, 카트에 적용되게 만들기 [with func.bind()]

    1) "카트 컴포넌트의 추가 함수", "추가 버튼"

                
        function cartItemAdd(id) {          //  cartCtx.addItem 메서드는, item(id,name,amount,price) 를 받는다.

            const selectedItem = cartItemInfo.find(item=>(item.id == id))

            cartCtx.addItem({
                id:selectedItem.id,
                name:selectedItem.name,
                amount:1,
                price:selectedItem.price
            })
        }
                ...       

        <div>
            <button onClick={cartItemAdd.bind(null,item.id)}> + </button>
            <button onClick={cartItemRemove.bind(null,item.id)}> - </button>
        </div>

    2) "Context 에서, 같은 id 로 추가를 누를경우, amount 만 추가되는 함수 로직 만들기"
        <Context 안의 useReducer 훅 안의  reducerFunction 의 로직>

    
            function cartReducerFn(state, action) {                     // "state 는 현재상태", "action" 은 "dispatch 안에 들어있는 객체"들에 접근한다.
              
                if (action.type === "ADD_ITEM") {                       // "만약 같은 id가 있다면 그 id가 있는 index를 찾는다."
                const sameIdIndex = state.itemInfo.findIndex(
                    (item) => item.id == action.item.id
                );
            
                const sameIdItem = state.itemInfo[sameIdIndex];         // "만약 INDEX 가 없다면, NULL 이 반환"
            
                let updatedItem;                                         // 업데이트된 하나
                let updatedItems;                                       // 업데이트된 전체
            
                if (sameIdItem) {           
                    updatedItem = {                             // 만약 존재한다면, [amount 는, 기존 상태+추가상태] 로 오버라이드
                        ...sameIdItem,
                        amount: +sameIdItem.amount + +action.item.amount,
                    };
                    updatedItems = [...state.itemInfo];                     // 기존 최종 itemInfo 를 가져 온 후
                    updatedItems[sameIdIndex] = updatedItem;                // 새로운 상태를 받은 index 만 오버라이드
                } else {
                    updatedItems = state.itemInfo.concat(action.item);          // 만약 없다면, 기존처럼, updatedItem 은 그냥 받아온 그대로, 추가상태는 추가상태 그대로
                }
            
                const updatedPrice =
                    state.totalPrice + action.item.price * action.item.amount;      // 새 값은 item 객체로 넣어준다.
            
                return {
                    itemInfo: updatedItems,
                    totalPrice: updatedPrice,
                };
            }



9. context의 reducerFunction 에 "카트에서 삭제"로직 만들기 with "Array.splice()"

    * Array.splice(IndexNumber, howManydelete, insertElement)

        const months = ['Jan', 'March', 'April', 'June'];

        months.splice(1, 0, 'Feb');
        console.log(months);        // ["Jan", "Feb", "March", "April", "June"]

        months.splice(4, 1, 'May');
        console.log(months);        // ["Jan", "Feb", "March", "April", "May"]


    [제거 로직]
        with "Array.splice()"

        0. context에서 action 으로, id 를 받아, 해당 INDEX 를 찾는다.
        1. 카트에서 - 를 누르면, 해당 id에 대한 amount 에 -1 을 시킨다.
        2. 카트에서, "제거" 버튼을 누르면, 해당 id에 대한 Element 를 "제거" 한다.
        3. 카트에서 - 를 눌러, amount 가 "0 이하" 인 상태가 된다면, 해당 Element 를 "제거"한다.

    [시작]
    
        1. 기본적인 "-" 했을때의 변형되는 context의 state 에 대한 함수 생성

            <Cart-Context> - "reducerFunction"

                if (action.type === "REMOVE_ITEM") {
                    const selectedIndex = state.itemInfo.findIndex(
                        (item) => item.id === action.id);                   // id에 맞는 index 를 찾는다.

                    const selectedItem = state.itemInfo[selectedIndex];     // 해당 index의 값을 저장
                
                    let decreseItemAmount = selectedItem.amount - 1;        // - 를 누르면 하나씩 줄인다.
                    let updatedItem = selectedItem;                         // 기존 상태를 받고
                    updatedItem.amount = decreseItemAmount;                 // amount 를 오버라이드
                
                    let updatedItems = [...state.itemInfo];                 // 기존 전체 배열을 받고
                    updatedItems[selectedIndex] = updatedItem;              // 해당 updatedItem 을 오버라이드
                
                    const updatedPrice = state.totalPrice - selectedItem.price; // totalPrice 는 price에 해당하는 값을 빼준다.
                
                    return {
                        itemInfo: updatedItems,
                        totalPrice: updatedPrice,
                    };
                }
            
            <Cart-Context> - "reducerFunction-Dispatch"

                function removeItem(id) {
                    dispatchCartAction({ type: "REMOVE_ITEM", id: id }); // 페이로드로, 변경할 데이터에 접근한다.
                }

            <Cart> - "-" 눌럿을때, function

                function cartItemDecrease(id) {
                    cartCtx.removeItem(id);
                }

        2. "만약 amount 가 0이하 가 된다면" 추가

            if (action.type === "REMOVE_ITEM") {
                const selectedIndex = state.itemInfo.findIndex(     // id에 맞는 index 를 찾는다.
                    (item) => item.id === action.id); 

                const selectedItem = state.itemInfo[selectedIndex];             // 해당 index의 값을 저장
            
                let decreseItemAmount = selectedItem.amount - 1;                // - 를 누르면 하나씩 줄인다.

                let updatedItem = selectedItem;                                 // 기존 상태를 받고
                updatedItem.amount = decreseItemAmount;                         // amount 를 오버라이드
            
                let updatedItems;
            
                if (updatedItem.amount <= 0) {                  // 만약 업데이트된 amount가 0보다 작아진다면
               
                    updatedItems = [...state.itemInfo];         // 기존 전체 배열 받고
                    updatedItems.splice(selectedIndex, 1);      // 기존 전체배열중, 해당 INDEX 를 삭제

                } else {                                        // 만약 업데이트된 amount 가 0 이상이라면

                    updatedItems = [...state.itemInfo];         // 기존 전체 배열을 받고
                    updatedItems[selectedIndex] = updatedItem;  // 해당 updatedItem 을 오버라이드
                }
            
                const updatedPrice = state.totalPrice - selectedItem.price; // totalPrice 는 price에 해당하는 값을 빼준다.
            
                return {
                    itemInfo: updatedItems,
                    totalPrice: updatedPrice,
                };
            }

    





